<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.ecnu.mapper.SysApiMapper">
  <resultMap id="BaseResultMap" type="net.ecnu.model.authentication.SysApi">
    <!--@mbg.generated-->
    <!--@Table sys_api-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="api_pid" jdbcType="BIGINT" property="apiPid" />
    <result column="api_pids" jdbcType="VARCHAR" property="apiPids" />
    <result column="is_leaf" jdbcType="BOOLEAN" property="isLeaf" />
    <result column="api_name" jdbcType="VARCHAR" property="apiName" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="api_sort" jdbcType="INTEGER" property="apiSort" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="status" jdbcType="BOOLEAN" property="status" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, api_pid, api_pids, is_leaf, api_name, url, api_sort, `level`, `status`, create_by, 
    create_time, update_by, update_time
  </sql>
  <select id="selectByExample" parameterType="net.ecnu.model.authentication.SysApiExample" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_api
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from sys_api
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--@mbg.generated-->
    delete from sys_api
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="net.ecnu.model.authentication.SysApiExample">
    <!--@mbg.generated-->
    delete from sys_api
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="net.ecnu.model.authentication.SysApi" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into sys_api (api_pid, api_pids, is_leaf, 
      api_name, url, api_sort, 
      `level`, `status`, create_by, 
      create_time, update_by, update_time
      )
    values (#{apiPid,jdbcType=BIGINT}, #{apiPids,jdbcType=VARCHAR}, #{isLeaf,jdbcType=BOOLEAN}, 
      #{apiName,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, #{apiSort,jdbcType=INTEGER}, 
      #{level,jdbcType=INTEGER}, #{status,jdbcType=BOOLEAN}, #{createBy,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="net.ecnu.model.authentication.SysApi" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into sys_api
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="apiPid != null">
        api_pid,
      </if>
      <if test="apiPids != null">
        api_pids,
      </if>
      <if test="isLeaf != null">
        is_leaf,
      </if>
      <if test="apiName != null">
        api_name,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="apiSort != null">
        api_sort,
      </if>
      <if test="level != null">
        `level`,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="apiPid != null">
        #{apiPid,jdbcType=BIGINT},
      </if>
      <if test="apiPids != null">
        #{apiPids,jdbcType=VARCHAR},
      </if>
      <if test="isLeaf != null">
        #{isLeaf,jdbcType=BOOLEAN},
      </if>
      <if test="apiName != null">
        #{apiName,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="apiSort != null">
        #{apiSort,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=BOOLEAN},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.ecnu.model.authentication.SysApiExample" resultType="java.lang.Long">
    <!--@mbg.generated-->
    select count(*) from sys_api
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbg.generated-->
    update sys_api
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.apiPid != null">
        api_pid = #{record.apiPid,jdbcType=BIGINT},
      </if>
      <if test="record.apiPids != null">
        api_pids = #{record.apiPids,jdbcType=VARCHAR},
      </if>
      <if test="record.isLeaf != null">
        is_leaf = #{record.isLeaf,jdbcType=BOOLEAN},
      </if>
      <if test="record.apiName != null">
        api_name = #{record.apiName,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.apiSort != null">
        api_sort = #{record.apiSort,jdbcType=INTEGER},
      </if>
      <if test="record.level != null">
        `level` = #{record.level,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=BOOLEAN},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbg.generated-->
    update sys_api
    set id = #{record.id,jdbcType=BIGINT},
      api_pid = #{record.apiPid,jdbcType=BIGINT},
      api_pids = #{record.apiPids,jdbcType=VARCHAR},
      is_leaf = #{record.isLeaf,jdbcType=BOOLEAN},
      api_name = #{record.apiName,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      api_sort = #{record.apiSort,jdbcType=INTEGER},
      `level` = #{record.level,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=BOOLEAN},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.ecnu.model.authentication.SysApi">
    <!--@mbg.generated-->
    update sys_api
    <set>
      <if test="apiPid != null">
        api_pid = #{apiPid,jdbcType=BIGINT},
      </if>
      <if test="apiPids != null">
        api_pids = #{apiPids,jdbcType=VARCHAR},
      </if>
      <if test="isLeaf != null">
        is_leaf = #{isLeaf,jdbcType=BOOLEAN},
      </if>
      <if test="apiName != null">
        api_name = #{apiName,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="apiSort != null">
        api_sort = #{apiSort,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        `level` = #{level,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=BOOLEAN},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.ecnu.model.authentication.SysApi">
    <!--@mbg.generated-->
    update sys_api
    set api_pid = #{apiPid,jdbcType=BIGINT},
      api_pids = #{apiPids,jdbcType=VARCHAR},
      is_leaf = #{isLeaf,jdbcType=BOOLEAN},
      api_name = #{apiName,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      api_sort = #{apiSort,jdbcType=INTEGER},
      `level` = #{level,jdbcType=INTEGER},
      `status` = #{status,jdbcType=BOOLEAN},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update sys_api
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="api_pid = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.apiPid,jdbcType=BIGINT}
        </foreach>
      </trim>
      <trim prefix="api_pids = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.apiPids,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="is_leaf = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.isLeaf,jdbcType=BOOLEAN}
        </foreach>
      </trim>
      <trim prefix="api_name = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.apiName,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="url = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.url,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="api_sort = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.apiSort,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="`level` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.level,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.status,jdbcType=BOOLEAN}
        </foreach>
      </trim>
      <trim prefix="create_by = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.createBy,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.createTime,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
      <trim prefix="update_by = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.updateBy,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id,jdbcType=BIGINT} then #{item.updateTime,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into sys_api
    (api_pid, api_pids, is_leaf, api_name, url, api_sort, `level`, `status`, create_by, 
      create_time, update_by, update_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.apiPid,jdbcType=BIGINT}, #{item.apiPids,jdbcType=VARCHAR}, #{item.isLeaf,jdbcType=BOOLEAN}, 
        #{item.apiName,jdbcType=VARCHAR}, #{item.url,jdbcType=VARCHAR}, #{item.apiSort,jdbcType=INTEGER}, 
        #{item.level,jdbcType=INTEGER}, #{item.status,jdbcType=BOOLEAN}, #{item.createBy,jdbcType=VARCHAR}, 
        #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateBy,jdbcType=VARCHAR}, #{item.updateTime,jdbcType=TIMESTAMP}
        )
    </foreach>
  </insert>

  <select id="selectSonApiNode" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from
      sys_api
    where
      api_pids like CONCAT('%[',#{parentId,jdbcType=BIGINT},']%')
  </select>
</mapper>